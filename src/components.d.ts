/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CfpbExpandable {
        /**
          * Whether or not the accordion item will have a border
         */
        "bordered"?: boolean;
        /**
          * The accordion item header text
         */
        "header"?: string;
        /**
          * Header level for button wrapper. Must be between 1 and 6
         */
        "level"?: number;
        /**
          * True if the item is open
         */
        "open"?: boolean;
        /**
          * Optional accordion item subheader text. Default is null.
         */
        "subheader"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    /**
     * @componentName Accordion
     * @accordionItemToggled This event is fired when an accordion item is opened or closed
     * @maturityCategory use
     * @maturityLevel best_practice
     * @translations English
     * @translations Spanish
     * @translations Tagalog
     */
    interface CfpbExpandableGroup {
        /**
          * If `true`, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * True if only a single item can be opened at once
         */
        "openSingle"?: boolean;
        /**
          * Optional accordion section heading text. Only used in analytics event. Default is null.
         */
        "sectionHeading"?: string;
    }
}
export interface CfpbExpandableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCfpbExpandableElement;
}
export interface CfpbExpandableGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCfpbExpandableGroupElement;
}
declare global {
    interface HTMLCfpbExpandableElement extends Components.CfpbExpandable, HTMLStencilElement {
    }
    var HTMLCfpbExpandableElement: {
        prototype: HTMLCfpbExpandableElement;
        new (): HTMLCfpbExpandableElement;
    };
    /**
     * @componentName Accordion
     * @accordionItemToggled This event is fired when an accordion item is opened or closed
     * @maturityCategory use
     * @maturityLevel best_practice
     * @translations English
     * @translations Spanish
     * @translations Tagalog
     */
    interface HTMLCfpbExpandableGroupElement extends Components.CfpbExpandableGroup, HTMLStencilElement {
    }
    var HTMLCfpbExpandableGroupElement: {
        prototype: HTMLCfpbExpandableGroupElement;
        new (): HTMLCfpbExpandableGroupElement;
    };
    interface HTMLElementTagNameMap {
        "cfpb-expandable": HTMLCfpbExpandableElement;
        "cfpb-expandable-group": HTMLCfpbExpandableGroupElement;
    }
}
declare namespace LocalJSX {
    interface CfpbExpandable {
        /**
          * Whether or not the accordion item will have a border
         */
        "bordered"?: boolean;
        /**
          * The accordion item header text
         */
        "header"?: string;
        /**
          * Header level for button wrapper. Must be between 1 and 6
         */
        "level"?: number;
        /**
          * This event is fired so that cfpb-expandable element can manage which items are opened or closed
         */
        "onAccordionItemToggled"?: (event: CfpbExpandableCustomEvent<any>) => void;
        /**
          * True if the item is open
         */
        "open"?: boolean;
        /**
          * Optional accordion item subheader text. Default is null.
         */
        "subheader"?: string;
        /**
          * Whether or not the component will use USWDS v3 styling.
         */
        "uswds"?: boolean;
    }
    /**
     * @componentName Accordion
     * @accordionItemToggled This event is fired when an accordion item is opened or closed
     * @maturityCategory use
     * @maturityLevel best_practice
     * @translations English
     * @translations Spanish
     * @translations Tagalog
     */
    interface CfpbExpandableGroup {
        /**
          * If `true`, doesn't fire the CustomEvent which can be used for analytics tracking.
         */
        "disableAnalytics"?: boolean;
        /**
          * The event used to track usage of the component. This is emitted when an accordion item is toggled and disableAnalytics is not true.
         */
        "onComponent-library-analytics"?: (event: CfpbExpandableGroupCustomEvent<any>) => void;
        /**
          * True if only a single item can be opened at once
         */
        "openSingle"?: boolean;
        /**
          * Optional accordion section heading text. Only used in analytics event. Default is null.
         */
        "sectionHeading"?: string;
    }
    interface IntrinsicElements {
        "cfpb-expandable": CfpbExpandable;
        "cfpb-expandable-group": CfpbExpandableGroup;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cfpb-expandable": LocalJSX.CfpbExpandable & JSXBase.HTMLAttributes<HTMLCfpbExpandableElement>;
            /**
             * @componentName Accordion
             * @accordionItemToggled This event is fired when an accordion item is opened or closed
             * @maturityCategory use
             * @maturityLevel best_practice
             * @translations English
             * @translations Spanish
             * @translations Tagalog
             */
            "cfpb-expandable-group": LocalJSX.CfpbExpandableGroup & JSXBase.HTMLAttributes<HTMLCfpbExpandableGroupElement>;
        }
    }
}
